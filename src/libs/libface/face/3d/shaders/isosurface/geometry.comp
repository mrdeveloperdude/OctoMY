#version 430

const uint chunk_size = 9;
const uint chunk_size2 = chunk_size*chunk_size;

layout (local_size_x = 9, local_size_y = 9, local_size_z = 9) in;


struct Vertex {
    vec3 pos;
    float scale;
    vec3 normal;
    float size;
};

layout(std430, binding=1) buffer GeomBuffer {
    Vertex vertices[];
};



const int tConnectionTable[256][15] = {
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,8,3,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,8,3,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,2,10,0,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1},
	{3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,11,2,8,11,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,9,0,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1},
	{3,10,1,11,10,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1},
	{3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1},
	{9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,3,0,7,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,1,9,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1},
	{1,2,10,8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,4,7,3,0,4,1,2,10,-1,-1,-1,-1,-1,-1},
	{9,2,10,9,0,2,8,4,7,-1,-1,-1,-1,-1,-1},
	{2,10,9,2,9,7,2,7,3,7,9,4,-1,-1,-1},
	{8,4,7,3,11,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1},
	{9,0,1,8,4,7,2,3,11,-1,-1,-1,-1,-1,-1},
	{4,7,11,9,4,11,9,11,2,9,2,1,-1,-1,-1},
	{3,10,1,3,11,10,7,8,4,-1,-1,-1,-1,-1,-1},
	{1,11,10,1,4,11,1,0,4,7,11,4,-1,-1,-1},
	{4,7,8,9,0,11,9,11,10,11,0,3,-1,-1,-1},
	{4,7,11,4,11,9,9,11,10,-1,-1,-1,-1,-1,-1},
	{9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,5,4,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,5,4,1,5,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1},
	{1,2,10,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,0,8,1,2,10,4,9,5,-1,-1,-1,-1,-1,-1},
	{5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1},
	{2,10,5,3,2,5,3,5,4,3,4,8,-1,-1,-1},
	{9,5,4,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,11,2,0,8,11,4,9,5,-1,-1,-1,-1,-1,-1},
	{0,5,4,0,1,5,2,3,11,-1,-1,-1,-1,-1,-1},
	{2,1,5,2,5,8,2,8,11,4,8,5,-1,-1,-1},
	{10,3,11,10,1,3,9,5,4,-1,-1,-1,-1,-1,-1},
	{4,9,5,0,8,1,8,10,1,8,11,10,-1,-1,-1},
	{5,4,0,5,0,11,5,11,10,11,0,3,-1,-1,-1},
	{5,4,8,5,8,10,10,8,11,-1,-1,-1,-1,-1,-1},
	{9,7,8,5,7,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1},
	{0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1},
	{1,5,3,3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,7,8,9,5,7,10,1,2,-1,-1,-1,-1,-1,-1},
	{10,1,2,9,5,0,5,3,0,5,7,3,-1,-1,-1},
	{8,0,2,8,2,5,8,5,7,10,5,2,-1,-1,-1},
	{2,10,5,2,5,3,3,5,7,-1,-1,-1,-1,-1,-1},
	{7,9,5,7,8,9,3,11,2,-1,-1,-1,-1,-1,-1},
	{9,5,7,9,7,2,9,2,0,2,7,11,-1,-1,-1},
	{2,3,11,0,1,8,1,7,8,1,5,7,-1,-1,-1},
	{11,2,1,11,1,7,7,1,5,-1,-1,-1,-1,-1,-1},
	{9,5,8,8,5,7,10,1,3,10,3,11,-1,-1,-1},
	{5,7,0,5,0,9,7,11,0,1,0,10,11,10,0},
	{11,10,0,11,0,3,10,5,0,8,0,7,5,7,0},
	{11,10,5,7,11,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,8,3,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,0,1,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,8,3,1,9,8,5,10,6,-1,-1,-1,-1,-1,-1},
	{1,6,5,2,6,1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,6,5,1,2,6,3,0,8,-1,-1,-1,-1,-1,-1},
	{9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1},
	{5,9,8,5,8,2,5,2,6,3,2,8,-1,-1,-1},
	{2,3,11,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{11,0,8,11,2,0,10,6,5,-1,-1,-1,-1,-1,-1},
	{0,1,9,2,3,11,5,10,6,-1,-1,-1,-1,-1,-1},
	{5,10,6,1,9,2,9,11,2,9,8,11,-1,-1,-1},
	{6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1},
	{0,8,11,0,11,5,0,5,1,5,11,6,-1,-1,-1},
	{3,11,6,0,3,6,0,6,5,0,5,9,-1,-1,-1},
	{6,5,9,6,9,11,11,9,8,-1,-1,-1,-1,-1,-1},
	{5,10,6,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,3,0,4,7,3,6,5,10,-1,-1,-1,-1,-1,-1},
	{1,9,0,5,10,6,8,4,7,-1,-1,-1,-1,-1,-1},
	{10,6,5,1,9,7,1,7,3,7,9,4,-1,-1,-1},
	{6,1,2,6,5,1,4,7,8,-1,-1,-1,-1,-1,-1},
	{1,2,5,5,2,6,3,0,4,3,4,7,-1,-1,-1},
	{8,4,7,9,0,5,0,6,5,0,2,6,-1,-1,-1},
	{7,3,9,7,9,4,3,2,9,5,9,6,2,6,9},
	{3,11,2,7,8,4,10,6,5,-1,-1,-1,-1,-1,-1},
	{5,10,6,4,7,2,4,2,0,2,7,11,-1,-1,-1},
	{0,1,9,4,7,8,2,3,11,5,10,6,-1,-1,-1},
	{9,2,1,9,11,2,9,4,11,7,11,4,5,10,6},
	{8,4,7,3,11,5,3,5,1,5,11,6,-1,-1,-1},
	{5,1,11,5,11,6,1,0,11,7,11,4,0,4,11},
	{0,5,9,0,6,5,0,3,6,11,6,3,8,4,7},
	{6,5,9,6,9,11,4,7,9,7,11,9,-1,-1,-1},
	{10,4,9,6,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,10,6,4,9,10,0,8,3,-1,-1,-1,-1,-1,-1},
	{10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1},
	{8,3,1,8,1,6,8,6,4,6,1,10,-1,-1,-1},
	{1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1},
	{3,0,8,1,2,9,2,4,9,2,6,4,-1,-1,-1},
	{0,2,4,4,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{8,3,2,8,2,4,4,2,6,-1,-1,-1,-1,-1,-1},
	{10,4,9,10,6,4,11,2,3,-1,-1,-1,-1,-1,-1},
	{0,8,2,2,8,11,4,9,10,4,10,6,-1,-1,-1},
	{3,11,2,0,1,6,0,6,4,6,1,10,-1,-1,-1},
	{6,4,1,6,1,10,4,8,1,2,1,11,8,11,1},
	{9,6,4,9,3,6,9,1,3,11,6,3,-1,-1,-1},
	{8,11,1,8,1,0,11,6,1,9,1,4,6,4,1},
	{3,11,6,3,6,0,0,6,4,-1,-1,-1,-1,-1,-1},
	{6,4,8,11,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1},
	{0,7,3,0,10,7,0,9,10,6,7,10,-1,-1,-1},
	{10,6,7,1,10,7,1,7,8,1,8,0,-1,-1,-1},
	{10,6,7,10,7,1,1,7,3,-1,-1,-1,-1,-1,-1},
	{1,2,6,1,6,8,1,8,9,8,6,7,-1,-1,-1},
	{2,6,9,2,9,1,6,7,9,0,9,3,7,3,9},
	{7,8,0,7,0,6,6,0,2,-1,-1,-1,-1,-1,-1},
	{7,3,2,6,7,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{2,3,11,10,6,8,10,8,9,8,6,7,-1,-1,-1},
	{2,0,7,2,7,11,0,9,7,6,7,10,9,10,7},
	{1,8,0,1,7,8,1,10,7,6,7,10,2,3,11},
	{11,2,1,11,1,7,10,6,1,6,7,1,-1,-1,-1},
	{8,9,6,8,6,7,9,1,6,11,6,3,1,3,6},
	{0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{7,8,0,7,0,6,3,11,0,11,6,0,-1,-1,-1},
	{7,11,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,0,8,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,1,9,11,7,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{8,1,9,8,3,1,11,7,6,-1,-1,-1,-1,-1,-1},
	{10,1,2,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,2,10,3,0,8,6,11,7,-1,-1,-1,-1,-1,-1},
	{2,9,0,2,10,9,6,11,7,-1,-1,-1,-1,-1,-1},
	{6,11,7,2,10,3,10,8,3,10,9,8,-1,-1,-1},
	{7,2,3,6,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1},
	{2,7,6,2,3,7,0,1,9,-1,-1,-1,-1,-1,-1},
	{1,6,2,1,8,6,1,9,8,8,7,6,-1,-1,-1},
	{10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1},
	{10,7,6,1,7,10,1,8,7,1,0,8,-1,-1,-1},
	{0,3,7,0,7,10,0,10,9,6,10,7,-1,-1,-1},
	{7,6,10,7,10,8,8,10,9,-1,-1,-1,-1,-1,-1},
	{6,8,4,11,8,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1},
	{8,6,11,8,4,6,9,0,1,-1,-1,-1,-1,-1,-1},
	{9,4,6,9,6,3,9,3,1,11,3,6,-1,-1,-1},
	{6,8,4,6,11,8,2,10,1,-1,-1,-1,-1,-1,-1},
	{1,2,10,3,0,11,0,6,11,0,4,6,-1,-1,-1},
	{4,11,8,4,6,11,0,2,9,2,10,9,-1,-1,-1},
	{10,9,3,10,3,2,9,4,3,11,3,6,4,6,3},
	{8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1},
	{0,4,2,4,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,9,0,2,3,4,2,4,6,4,3,8,-1,-1,-1},
	{1,9,4,1,4,2,2,4,6,-1,-1,-1,-1,-1,-1},
	{8,1,3,8,6,1,8,4,6,6,10,1,-1,-1,-1},
	{10,1,0,10,0,6,6,0,4,-1,-1,-1,-1,-1,-1},
	{4,6,3,4,3,8,6,10,3,0,3,9,10,9,3},
	{10,9,4,6,10,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,9,5,7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,8,3,4,9,5,11,7,6,-1,-1,-1,-1,-1,-1},
	{5,0,1,5,4,0,7,6,11,-1,-1,-1,-1,-1,-1},
	{11,7,6,8,3,4,3,5,4,3,1,5,-1,-1,-1},
	{9,5,4,10,1,2,7,6,11,-1,-1,-1,-1,-1,-1},
	{6,11,7,1,2,10,0,8,3,4,9,5,-1,-1,-1},
	{7,6,11,5,4,10,4,2,10,4,0,2,-1,-1,-1},
	{3,4,8,3,5,4,3,2,5,10,5,2,11,7,6},
	{7,2,3,7,6,2,5,4,9,-1,-1,-1,-1,-1,-1},
	{9,5,4,0,8,6,0,6,2,6,8,7,-1,-1,-1},
	{3,6,2,3,7,6,1,5,0,5,4,0,-1,-1,-1},
	{6,2,8,6,8,7,2,1,8,4,8,5,1,5,8},
	{9,5,4,10,1,6,1,7,6,1,3,7,-1,-1,-1},
	{1,6,10,1,7,6,1,0,7,8,7,0,9,5,4},
	{4,0,10,4,10,5,0,3,10,6,10,7,3,7,10},
	{7,6,10,7,10,8,5,4,10,4,8,10,-1,-1,-1},
	{6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1},
	{3,6,11,0,6,3,0,5,6,0,9,5,-1,-1,-1},
	{0,11,8,0,5,11,0,1,5,5,6,11,-1,-1,-1},
	{6,11,3,6,3,5,5,3,1,-1,-1,-1,-1,-1,-1},
	{1,2,10,9,5,11,9,11,8,11,5,6,-1,-1,-1},
	{0,11,3,0,6,11,0,9,6,5,6,9,1,2,10},
	{11,8,5,11,5,6,8,0,5,10,5,2,0,2,5},
	{6,11,3,6,3,5,2,10,3,10,5,3,-1,-1,-1},
	{5,8,9,5,2,8,5,6,2,3,8,2,-1,-1,-1},
	{9,5,6,9,6,0,0,6,2,-1,-1,-1,-1,-1,-1},
	{1,5,8,1,8,0,5,6,8,3,8,2,6,2,8},
	{1,5,6,2,1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,3,6,1,6,10,3,8,6,5,6,9,8,9,6},
	{10,1,0,10,0,6,9,5,0,5,6,0,-1,-1,-1},
	{0,3,8,5,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{10,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{11,5,10,7,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{11,5,10,11,7,5,8,3,0,-1,-1,-1,-1,-1,-1},
	{5,11,7,5,10,11,1,9,0,-1,-1,-1,-1,-1,-1},
	{10,7,5,10,11,7,9,8,1,8,3,1,-1,-1,-1},
	{11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1},
	{0,8,3,1,2,7,1,7,5,7,2,11,-1,-1,-1},
	{9,7,5,9,2,7,9,0,2,2,11,7,-1,-1,-1},
	{7,5,2,7,2,11,5,9,2,3,2,8,9,8,2},
	{2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1},
	{8,2,0,8,5,2,8,7,5,10,2,5,-1,-1,-1},
	{9,0,1,5,10,3,5,3,7,3,10,2,-1,-1,-1},
	{9,8,2,9,2,1,8,7,2,10,2,5,7,5,2},
	{1,3,5,3,7,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,8,7,0,7,1,1,7,5,-1,-1,-1,-1,-1,-1},
	{9,0,3,9,3,5,5,3,7,-1,-1,-1,-1,-1,-1},
	{9,8,7,5,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1},
	{5,0,4,5,11,0,5,10,11,11,3,0,-1,-1,-1},
	{0,1,9,8,4,10,8,10,11,10,4,5,-1,-1,-1},
	{10,11,4,10,4,5,11,3,4,9,4,1,3,1,4},
	{2,5,1,2,8,5,2,11,8,4,5,8,-1,-1,-1},
	{0,4,11,0,11,3,4,5,11,2,11,1,5,1,11},
	{0,2,5,0,5,9,2,11,5,4,5,8,11,8,5},
	{9,4,5,2,11,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{2,5,10,3,5,2,3,4,5,3,8,4,-1,-1,-1},
	{5,10,2,5,2,4,4,2,0,-1,-1,-1,-1,-1,-1},
	{3,10,2,3,5,10,3,8,5,4,5,8,0,1,9},
	{5,10,2,5,2,4,1,9,2,9,4,2,-1,-1,-1},
	{8,4,5,8,5,3,3,5,1,-1,-1,-1,-1,-1,-1},
	{0,4,5,1,0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{8,4,5,8,5,3,9,0,5,0,3,5,-1,-1,-1},
	{9,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1},
	{0,8,3,4,9,7,9,11,7,9,10,11,-1,-1,-1},
	{1,10,11,1,11,4,1,4,0,7,4,11,-1,-1,-1},
	{3,1,4,3,4,8,1,10,4,7,4,11,10,11,4},
	{4,11,7,9,11,4,9,2,11,9,1,2,-1,-1,-1},
	{9,7,4,9,11,7,9,1,11,2,11,1,0,8,3},
	{11,7,4,11,4,2,2,4,0,-1,-1,-1,-1,-1,-1},
	{11,7,4,11,4,2,8,3,4,3,2,4,-1,-1,-1},
	{2,9,10,2,7,9,2,3,7,7,4,9,-1,-1,-1},
	{9,10,7,9,7,4,10,2,7,8,7,0,2,0,7},
	{3,7,10,3,10,2,7,4,10,1,10,0,4,0,10},
	{1,10,2,8,7,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,9,1,4,1,7,7,1,3,-1,-1,-1,-1,-1,-1},
	{4,9,1,4,1,7,0,8,1,8,7,1,-1,-1,-1},
	{4,0,3,7,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{4,8,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{9,10,8,10,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,0,9,3,9,11,11,9,10,-1,-1,-1,-1,-1,-1},
	{0,1,10,0,10,8,8,10,11,-1,-1,-1,-1,-1,-1},
	{3,1,10,11,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,2,11,1,11,9,9,11,8,-1,-1,-1,-1,-1,-1},
	{3,0,9,3,9,11,1,2,9,2,11,9,-1,-1,-1},
	{0,2,11,8,0,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{2,3,8,2,8,10,10,8,9,-1,-1,-1,-1,-1,-1},
	{9,10,2,0,9,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{2,3,8,2,8,10,0,1,8,1,10,8,-1,-1,-1},
	{1,10,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{1,3,8,9,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{0,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
};



layout(std430,binding=3) readonly buffer InputField {
  float data[chunk_size*chunk_size*chunk_size];
};

uniform float voxel_size = 1;
uniform float threshold = 0.0;

vec3 createVert( vec3 p0, vec3 p1, float d0, float d1 )
{
	float diff = d1-d0;
	if( abs(diff) > 1e-9 )
		return (p1-p0)*(threshold-d0)/diff + p0;
	else
		return (p0 + p1)*0.5;
}

uint contIndex( uint x, uint y, uint z )
{
	return chunk_size2*z + chunk_size*y + x;
}

void createVerts( vec3 voxel_index, inout vec3 pos[12], float vox_data[8] )
{
	// All corner points of the current cube
	float x = voxel_index.x*voxel_size;
	float y = voxel_index.y*voxel_size;
	float z = voxel_index.z*voxel_size;
	vec3 c0 = vec3( x, y, z);
	vec3 c1 = vec3( x+voxel_size, y, z);
	vec3 c2 = vec3( x+voxel_size, y+voxel_size, z);
	vec3 c3 = vec3( x, y+voxel_size, z);
	vec3 c4 = vec3( x, y, z+voxel_size );
	vec3 c5 = vec3( x+voxel_size, y, z+voxel_size );
	vec3 c6 = vec3( x+voxel_size, y+voxel_size, z+voxel_size );
	vec3 c7 = vec3( x, y+voxel_size, z+voxel_size );

	// Find the 12 edge vertices by interpolating between the corner points,
	// depending on the values of the field at those corner points:
	pos[0] = createVert( c0, c1, vox_data[0], vox_data[1] );
	pos[1] = createVert( c1, c2, vox_data[1], vox_data[2] );
	pos[2] = createVert( c2, c3, vox_data[2], vox_data[3] );
	pos[3] = createVert( c3, c0, vox_data[3], vox_data[0] );

	pos[4] = createVert( c4, c5, vox_data[4], vox_data[5] );
	pos[5] = createVert( c5, c6, vox_data[5], vox_data[6] );
	pos[6] = createVert( c6, c7, vox_data[6], vox_data[7] );
	pos[7] = createVert( c7, c4, vox_data[7], vox_data[4] );
	
	pos[8] = createVert( c0, c4, vox_data[0], vox_data[4] );
	pos[9] = createVert( c1, c5, vox_data[1], vox_data[5] );
	pos[10] = createVert( c2, c6, vox_data[2], vox_data[6] );
	pos[11] = createVert( c3, c7, vox_data[3], vox_data[7] );
}


void main() {

  // Make sure this is not a border cell (otherwise neighbor lookup in the next step would fail):
  if( gl_LocalInvocationID.x >= chunk_size-1 ||
		  gl_LocalInvocationID.y >= chunk_size-1 ||
		  gl_LocalInvocationID.z >= chunk_size-1 )
		  return;

  uvec3 index = gl_LocalInvocationID;

  // Retrieve all necessary data from neighboring cells:
  float vox_data[8];
  vox_data[0] = data[ contIndex( index.x, index.y, index.z ) ];
  vox_data[1] = data[ contIndex( index.x+1, index.y, index.z ) ];
  vox_data[2] = data[ contIndex( index.x+1, index.y+1, index.z ) ];
  vox_data[3] = data[ contIndex( index.x, index.y+1, index.z ) ];

  vox_data[4] = data[ contIndex( index.x, index.y, index.z+1 ) ];
  vox_data[5] = data[ contIndex( index.x+1, index.y, index.z+1 ) ];
  vox_data[6] = data[ contIndex( index.x+1, index.y+1, index.z+1 ) ];
  vox_data[7] = data[ contIndex( index.x, index.y+1, index.z+1 ) ];

  // Turn this information into a triangle list index:
  int triangleTypeIndex = 0;
  for( int i = 0; i < 8; i++ )
  	if( vox_data[i] > threshold )
		triangleTypeIndex |= 1 << i;

  // Set up all neighboring vertices:
  vec3 verts[12];
  for( int i = 0; i < 12; i++ )
  	verts[i] = vec3(0,0,0);
  createVerts( gl_LocalInvocationID, verts, vox_data );

  int tri_vert_indices[15] = tConnectionTable[triangleTypeIndex];
  vec3 curNormal = vec3(0,0,1);
  for( int i = 0; i < 15; i++ )
  {
  	  if( i % 3 == 0 )
	  {
	  	  vec3 p1 = verts[tri_vert_indices[i]];
	  	  vec3 p2 = verts[tri_vert_indices[i+1]];
	  	  vec3 p3 = verts[tri_vert_indices[i+2]];
		  curNormal = normalize( cross( (p1-p2), (p1-p3) ) );
	  }
  	  uint targetVertIndex = gl_LocalInvocationIndex*15 + i;
	  if( tri_vert_indices[i] > -1 )
	  {
	  	  vertices[targetVertIndex].pos = verts[tri_vert_indices[i]];
	  	  vertices[targetVertIndex].normal = curNormal;
	  } else {
	  	  vertices[targetVertIndex].pos = vec3(0,0,0);
	  	  vertices[targetVertIndex].normal = vec3(0,1,0);
	  }
  }
}
