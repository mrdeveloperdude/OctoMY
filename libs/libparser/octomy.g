-- NOTE: Why don't we simplify the build by using merged_output option to form
--       one file instead of 4? Because this file becomes impossible to use,
--       since we cannot include it without causing duplicate symbols being
--       linked and we cannot link it without manually specifying a header for
--       it.

-- This gives a name to the table. Default is simply "parser"
-- Generates octomy_table.cpp & octomy_table_p.h
%parser octomy_table
-- This gives filenames to the parser itself
%decl octomy_parser.hpp
%impl octomy_parser.cpp

%token_prefix TOK_
%token number
%token DESCRIPTOR
%token PLAN
%token LPAREN
%token RPAREN
%token LBRACKET
%token RBRACKET
%token LBRACE
%token RBRACE
%token STRING

%start Goal

/:


// WARNING:                                                             :WARNING
// WARNING: DO NOT EDIT THIS FILE! IT IS AUTOGENERATED BY FLEX & QLALR  :WARNING
// WARNING:                                                             :WARNING

#ifndef OCTOMY_PARSER_HPP
#define OCTOMY_PARSER_HPP

#include "octomy_table_p.h"
#include "../libparser/GeneralPurposeParser.hpp"


struct yy_buffer_state;
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class OctomyLexer{
	private:
		YY_BUFFER_STATE buf;
	public:

		bool init(const char *in);
		bool deinit();

};

class OctomyParser: public GeneralPurposeParser<OctomyLexer, $table>{
	private:
		int stack[10];
	public:

		OctomyParser(){
			for(int i=0;i<10;++i){
				stack[i]=2;

			}

		}

		int nextToken();
		void consumeRule(int rule);

		int &sym(int index){
			if(index<1){
				index=1;
			}
			else if(index>10){
				index=10;
			}
			return stack[index-1];
		}


};



#endif // OCTOMY_PARSER_HPP
:/


/.


#include "octomy_parser.hpp"
#include "octomy_lexer.h"



#include <QtDebug>
#include <cstdlib>

////////////////////////////////////////////////////////////////////////////

bool OctomyLexer::init(const char *in){
	buf=yy_scan_string(in);
	return 0!=buf;
}

bool OctomyLexer::deinit(){
	buf=0;
	return true;
}

////////////////////////////////////////////////////////////////////////////

void OctomyParser::consumeRule(int ruleno){
	qDebug()<<"RULE: "<<ruleno;
	/*
	switch (ruleno) {
		./

Goal: Expression ;
		/.
		case $rule_number:
			qDebug() << "value:" << sym(1);
			break;
			./

PrimaryExpression: number ;
PrimaryExpression: lparen Expression rparen ;
			/.
		case $rule_number:
			sym(1) = sym (2);
			break;
			./

Expression: PrimaryExpression ;

Expression: Expression plus PrimaryExpression;
			/.
		case $rule_number:
			sym(1) += sym (3);
			break;
			./

Expression: Expression minus PrimaryExpression;
			/.
		case $rule_number:
			sym(1) -= sym (3);
			break;
			./


Expression: Expression multiply PrimaryExpression;
			/.
		case $rule_number:
			sym(1) *= sym (3);
			break;
			./

Expression: Expression divide PrimaryExpression;
			/.
		case $rule_number:
			sym(1) /= sym (3);
			break;
			./



			/.

	} // switch
	*/
}


./


