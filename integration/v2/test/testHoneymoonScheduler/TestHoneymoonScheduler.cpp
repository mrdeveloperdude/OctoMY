#include "TestHoneymoonScheduler.hpp"

#include "utility/time/HoneymoonScheduler.hpp"

template <typename T>
class HoneymoonSchedulerInfiltrator: public HoneymoonScheduler<T>
{
public:
	// Parameters
	T triggeredOutput()
	{
		return HoneymoonScheduler<T>::mTriggeredOutput;
	}


	T idleOutput()
	{
		return HoneymoonScheduler<T>::mIdleOutput;
	}


	quint64 gracePeriod()
	{
		return HoneymoonScheduler<T>::mGracePeriod;
	}


	quint64 decayPeriod()
	{
		return HoneymoonScheduler<T>::mDecayPeriod;
	}


	// State
	T lastTrigger()
	{
		return HoneymoonScheduler<T>::mLastTrigger;
	}


	ConfigureHelper &configureHelper()
	{
		return HoneymoonScheduler<T>::mConfigureHelper;
	}
};


void TestHoneymoonScheduler::generateTestCase(
	const int idleV
	, const int triggeredV
	, const quint64 graceP
	, const quint64 decayP
	, const quint64 interval)
{
	HoneymoonSchedulerInfiltrator<int> hmsi;
	hmsi.configure(triggeredV, graceP, decayP, idleV);
	const quint64 now=10000;
	const quint64 start=now-3000;
	const quint64 end=now+graceP+decayP+3000;
	const int m=qMax(idleV, triggeredV);
	hmsi.trigger(now);
	qDebug().noquote().nospace()<<"    HoneymoonSchedulerInfiltrator<int> hmsi;";
	qDebug().noquote().nospace()<<QString("    hmsi.configure(%1, %2, %3, %4);").arg(triggeredV).arg(graceP).arg(decayP).arg(idleV);
	qDebug().noquote().nospace()<<QString("    hmsi.trigger(%1);").arg(now);
	for(quint64 t=start; t<end; t+=interval) {
		const int v=hmsi.currentValue(t);
		const int d=(v*20)/m;
		qDebug().noquote().nospace()<<QString("    QCOMPARE(hmsi.currentValue(%1), %2); // %3").arg(t).arg(v).arg(QString("#").repeated(d));

	}

}


void TestHoneymoonScheduler::testHelper(const int idleV, const int triggeredV, const quint64 graceP, const quint64 decayP)
{
	HoneymoonSchedulerInfiltrator<int> hmsi;
	QCOMPARE(0, hmsi.idleOutput());
	QCOMPARE(1, hmsi.triggeredOutput());
	QCOMPARE(10000, hmsi.gracePeriod());
	QCOMPARE(20000, hmsi.decayPeriod());
	hmsi.configure(triggeredV, graceP, decayP, idleV);
	QCOMPARE(idleV, hmsi.idleOutput());
	QCOMPARE(triggeredV, hmsi.triggeredOutput());
	QCOMPARE(graceP, hmsi.gracePeriod());
	QCOMPARE(decayP, hmsi.decayPeriod());
	const quint64 now=utility::time::currentMsecsSinceEpoch<quint64>();
	{
		float v=hmsi.currentValue(now);
		QCOMPARE(v, hmsi.triggeredOutput());
	}
	hmsi.reset();
	{
		float v=hmsi.currentValue(now);
		QCOMPARE(v, hmsi.idleOutput());
	}
	hmsi.trigger();
	{
		float v=hmsi.currentValue(now);
		QCOMPARE(v, hmsi.triggeredOutput());
	}
	{
		// Calculate value in the middle of the slope
		int v=hmsi.currentValue(now+graceP+decayP/2);
		int bigger=hmsi.triggeredOutput();
		int smaller=hmsi.idleOutput();
		if(smaller>bigger){
			int tmp=smaller;
			smaller=bigger;
			bigger=tmp;
		}
		QVERIFY(v < bigger);
		QVERIFY(v > smaller);
	}
}


void TestHoneymoonScheduler::testActivation( )
{
	const int idleV=20;
	const int triggeredV=30;
	const quint64 graceP=1337;
	const quint64 decayP=graceP * 2;
	testHelper(idleV, triggeredV, graceP, decayP);
	// Uncomment this to generate new test cases for testNormalUse()
	//generateTestCase(1000, 5000, 1000, 2000, 100);
}


void TestHoneymoonScheduler::testNormalUse()
{
	// NOTE: This was generated by generateTestCase()
	HoneymoonSchedulerInfiltrator<int> hmsi;
	hmsi.configure(5000, 1000, 2000, 1000);
	hmsi.trigger(10000);
	QCOMPARE(hmsi.currentValue(7000), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7100), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7200), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7300), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7400), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7500), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7600), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7700), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7800), 5000); // ####################
	QCOMPARE(hmsi.currentValue(7900), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8000), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8100), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8200), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8300), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8400), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8500), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8600), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8700), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8800), 5000); // ####################
	QCOMPARE(hmsi.currentValue(8900), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9000), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9100), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9200), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9300), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9400), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9500), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9600), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9700), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9800), 5000); // ####################
	QCOMPARE(hmsi.currentValue(9900), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10000), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10100), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10200), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10300), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10400), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10500), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10600), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10700), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10800), 5000); // ####################
	QCOMPARE(hmsi.currentValue(10900), 5000); // ####################
	QCOMPARE(hmsi.currentValue(11000), 5000); // ####################
	QCOMPARE(hmsi.currentValue(11100), 4800); // ###################
	QCOMPARE(hmsi.currentValue(11200), 4600); // ##################
	QCOMPARE(hmsi.currentValue(11300), 4400); // #################
	QCOMPARE(hmsi.currentValue(11400), 4200); // ################
	QCOMPARE(hmsi.currentValue(11500), 4000); // ################
	QCOMPARE(hmsi.currentValue(11600), 3800); // ###############
	QCOMPARE(hmsi.currentValue(11700), 3600); // ##############
	QCOMPARE(hmsi.currentValue(11800), 3400); // #############
	QCOMPARE(hmsi.currentValue(11900), 3200); // ############
	QCOMPARE(hmsi.currentValue(12000), 3000); // ############
	QCOMPARE(hmsi.currentValue(12100), 2800); // ###########
	QCOMPARE(hmsi.currentValue(12200), 2600); // ##########
	QCOMPARE(hmsi.currentValue(12300), 2400); // #########
	QCOMPARE(hmsi.currentValue(12400), 2200); // ########
	QCOMPARE(hmsi.currentValue(12500), 2000); // ########
	QCOMPARE(hmsi.currentValue(12600), 1800); // #######
	QCOMPARE(hmsi.currentValue(12700), 1600); // ######
	QCOMPARE(hmsi.currentValue(12800), 1400); // #####
	QCOMPARE(hmsi.currentValue(12900), 1200); // ####
	QCOMPARE(hmsi.currentValue(13000), 1000); // ####
	QCOMPARE(hmsi.currentValue(13100), 1000); // ####
	QCOMPARE(hmsi.currentValue(13200), 1000); // ####
	QCOMPARE(hmsi.currentValue(13300), 1000); // ####
	QCOMPARE(hmsi.currentValue(13400), 1000); // ####
	QCOMPARE(hmsi.currentValue(13500), 1000); // ####
	QCOMPARE(hmsi.currentValue(13600), 1000); // ####
	QCOMPARE(hmsi.currentValue(13700), 1000); // ####
	QCOMPARE(hmsi.currentValue(13800), 1000); // ####
	QCOMPARE(hmsi.currentValue(13900), 1000); // ####
	QCOMPARE(hmsi.currentValue(14000), 1000); // ####
	QCOMPARE(hmsi.currentValue(14100), 1000); // ####
	QCOMPARE(hmsi.currentValue(14200), 1000); // ####
	QCOMPARE(hmsi.currentValue(14300), 1000); // ####
	QCOMPARE(hmsi.currentValue(14400), 1000); // ####
	QCOMPARE(hmsi.currentValue(14500), 1000); // ####
	QCOMPARE(hmsi.currentValue(14600), 1000); // ####
	QCOMPARE(hmsi.currentValue(14700), 1000); // ####
	QCOMPARE(hmsi.currentValue(14800), 1000); // ####
	QCOMPARE(hmsi.currentValue(14900), 1000); // ####
	QCOMPARE(hmsi.currentValue(15000), 1000); // ####
	QCOMPARE(hmsi.currentValue(15100), 1000); // ####
	QCOMPARE(hmsi.currentValue(15200), 1000); // ####
	QCOMPARE(hmsi.currentValue(15300), 1000); // ####
	QCOMPARE(hmsi.currentValue(15400), 1000); // ####
	QCOMPARE(hmsi.currentValue(15500), 1000); // ####
	QCOMPARE(hmsi.currentValue(15600), 1000); // ####
	QCOMPARE(hmsi.currentValue(15700), 1000); // ####
	QCOMPARE(hmsi.currentValue(15800), 1000); // ####
	QCOMPARE(hmsi.currentValue(15900), 1000); // ####

}


void TestHoneymoonScheduler::testReverseScale()
{
	// We reverse idle and triggered values to see that it still works
	const int idleV=30;
	const int triggeredV=20;
	const quint64 graceP=1337;
	const quint64 decayP=graceP*2;
	testHelper(idleV, triggeredV,graceP, decayP);
	HoneymoonSchedulerInfiltrator<float> hmsi;
	//generateTestCase(5000, 1000, 1000, 2000, 100);
}


OC_TEST_MAIN(test, TestHoneymoonScheduler)
